<!--
Code released under a CC0 1.0 Universal license. 
You can copy, modify, and distribute the code for 
this tool, even for commercial purposes, all 
without asking permission.

Content of this tool released under the licenses 
described in "licenses.html" in the root folder of this
application.
-->

<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="user-scalable=yes, width=device-width">
<meta name="robots" content="noindex">
<meta charset="UTF-8">
<style>
body {
    max-width: 800px;
    margin: auto;
    font-size: 18px;
    font-family: sans-serif;
    padding: 10px;
}
p, li {
    line-height: 1.5em;
}
ul, ol {
    padding-left: 20px;
    margin-left: 0;
}
li {
    margin-left: 0;
}
table {
    border-collapse: collapse;
    width: 100%;
    margin: 10px 0;
}
th, td {
    border: 1px solid black;
    padding: 8px;
    text-align: left;
}
th {
    background-color: #f0f0f0;
}
.input-section {
    margin: 15px 0;
    padding: 10px;
    border: 2px solid #ccc;
    border-radius: 5px;
}
.input-section h3, .results h3 {
    margin-top: 0;
    margin-bottom: 10px;
}
.character-group, .monster-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin: 8px 0;
    padding: 8px;
    background-color: #f9f9f9;
    border-radius: 3px;
}
.input-row {
    display: flex;
    gap: 12px;
    align-items: flex-end;
    flex-wrap: wrap;
}
.input-group {
    display: flex;
    flex-direction: column;
    min-width: 120px;
}
.input-group label {
    font-weight: bold;
    margin-bottom: 3px;
    font-size: 16px;
}
.add-button {
    background-color: #777;
    color: white;
    border: none;
    padding: 8px 15px;
    cursor: pointer;
    border-radius: 3px;
    font-size: 16px;
}
.add-button:hover {
    background-color: #555;
}
.remove-button {
    background-color: #f44336;
    color: white;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    border-radius: 3px;
    font-size: 14px;
    align-self: flex-end;
}
.remove-button:hover {
    background-color: #da190b;
}
.results {
    margin: 15px 0;
    padding: 12px;
    border: 2px solid #333;
    border-radius: 5px;
    background-color: #f8f8f8;
}
.difficulty-easy { color: green; font-weight: bold; }
.difficulty-medium { color: orange; font-weight: bold; }
.difficulty-hard { color: red; font-weight: bold; }
.difficulty-deadly { color: darkred; font-weight: bold; }
.difficulty-warning { color: #DAA520; font-weight: bold; }
input, select {
    padding: 8px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 3px;
}
@media (max-width: 600px) {
    .input-row {
        flex-direction: column;
        align-items: stretch;
    }
    .input-group {
        min-width: auto;
    }
    .remove-button {
        align-self: center;
        margin-top: 10px;
    }
}
</style>
<title>5e Encounter Calculator</title>
</head>
<body>
<p><a href="../../index.html">5e Artisanal Database</a> > 5e Encounter Calculator</p>

<h1>5e Encounter Calculator</h1>

<div class="input-section">
    <h3>Player Characters</h3>
    <div id="characterGroups">
        <div class="character-group">
            <div class="input-row">
                <div class="input-group">
                    <label>Number of Characters</label>
                    <select class="char-count" onchange="calculateEncounter()">
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4" selected>4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                        <option value="10">10</option>
                    </select>
                </div>
                <div class="input-group">
                    <label>Level</label>
                    <select class="char-level" onchange="calculateEncounter()">
                        <option value="1" selected>1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                        <option value="10">10</option>
                        <option value="11">11</option>
                        <option value="12">12</option>
                        <option value="13">13</option>
                        <option value="14">14</option>
                        <option value="15">15</option>
                        <option value="16">16</option>
                        <option value="17">17</option>
                        <option value="18">18</option>
                        <option value="19">19</option>
                        <option value="20">20</option>
                    </select>
                </div>
                <button type="button" class="remove-button" onclick="removeCharacterGroup(this)" style="display: none;">Remove</button>
            </div>
        </div>
    </div>
    <button type="button" class="add-button" onclick="addCharacterGroup()">+ Add Character Group</button>
</div>

<div class="input-section">
    <h3>Monsters</h3>
    <div id="monsterGroups">
        <div class="monster-group">
            <div class="input-row">
                <div class="input-group">
                    <label>Number of Monsters</label>
                    <select class="monster-count" onchange="calculateEncounter()">
                        <option value="1" selected>1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                        <option value="10">10</option>
                        <option value="11">11</option>
                        <option value="12">12</option>
                        <option value="13">13</option>
                        <option value="14">14</option>
                        <option value="15">15</option>
                        <option value="16">16</option>
                        <option value="17">17</option>
                        <option value="18">18</option>
                        <option value="19">19</option>
                        <option value="20">20</option>
                    </select>
                </div>
                <div class="input-group">
                    <label>Challenge Rating</label>
                    <select class="monster-cr" onchange="calculateEncounter()">
                        <option value="0">0</option>
                        <option value="0.125">1/8</option>
                        <option value="0.25">1/4</option>
                        <option value="0.5">1/2</option>
                        <option value="1" selected>1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                        <option value="10">10</option>
                        <option value="11">11</option>
                        <option value="12">12</option>
                        <option value="13">13</option>
                        <option value="14">14</option>
                        <option value="15">15</option>
                        <option value="16">16</option>
                        <option value="17">17</option>
                        <option value="18">18</option>
                        <option value="19">19</option>
                        <option value="20">20</option>
                        <option value="21">21</option>
                        <option value="22">22</option>
                        <option value="23">23</option>
                        <option value="24">24</option>
                        <option value="25">25</option>
                        <option value="26">26</option>
                        <option value="27">27</option>
                        <option value="28">28</option>
                        <option value="29">29</option>
                        <option value="30">30</option>
                    </select>
                </div>
                <button type="button" class="remove-button" onclick="removeMonsterGroup(this)" style="display: none;">Remove</button>
            </div>
        </div>
    </div>
    <button type="button" class="add-button" onclick="addMonsterGroup()">+ Add Monster Group</button>
</div>

<div class="results" id="results">
    <h3>Encounter Assessment</h3>
    <p id="encounterResult">Configure your encounter above to see the difficulty assessment.</p>
</div>

<script>
// XP thresholds by character level for D&D 2014
const xpThresholds2014 = {
    1: { easy: 25, medium: 50, hard: 75, deadly: 100 },
    2: { easy: 50, medium: 100, hard: 150, deadly: 200 },
    3: { easy: 75, medium: 150, hard: 225, deadly: 400 },
    4: { easy: 125, medium: 250, hard: 375, deadly: 500 },
    5: { easy: 250, medium: 500, hard: 750, deadly: 1100 },
    6: { easy: 300, medium: 600, hard: 900, deadly: 1400 },
    7: { easy: 350, medium: 750, hard: 1100, deadly: 1700 },
    8: { easy: 450, medium: 900, hard: 1400, deadly: 2100 },
    9: { easy: 550, medium: 1100, hard: 1600, deadly: 2400 },
    10: { easy: 600, medium: 1200, hard: 1900, deadly: 2800 },
    11: { easy: 800, medium: 1600, hard: 2400, deadly: 3600 },
    12: { easy: 1000, medium: 2000, hard: 3000, deadly: 4500 },
    13: { easy: 1100, medium: 2200, hard: 3400, deadly: 5100 },
    14: { easy: 1250, medium: 2500, hard: 3800, deadly: 5700 },
    15: { easy: 1400, medium: 2800, hard: 4300, deadly: 6400 },
    16: { easy: 1600, medium: 3200, hard: 4800, deadly: 7200 },
    17: { easy: 2000, medium: 3900, hard: 5900, deadly: 8800 },
    18: { easy: 2100, medium: 4200, hard: 6300, deadly: 9500 },
    19: { easy: 2400, medium: 4900, hard: 7300, deadly: 10900 },
    20: { easy: 2800, medium: 5700, hard: 8500, deadly: 12700 }
};

// D&D 2024 encounter table by party level
const encounterThresholds2024 = {
    1: { low: 50, moderate: 75, high: 100 },
    2: { low: 100, moderate: 150, high: 200 },
    3: { low: 150, moderate: 225, high: 400 },
    4: { low: 250, moderate: 375, high: 500 },
    5: { low: 500, moderate: 750, high: 1100 },
    6: { low: 600, moderate: 1000, high: 1400 },
    7: { low: 750, moderate: 1300, high: 1700 },
    8: { low: 1000, moderate: 1700, high: 2100 },
    9: { low: 1300, moderate: 2000, high: 2600 },
    10: { low: 1600, moderate: 2300, high: 3100 },
    11: { low: 1900, moderate: 2900, high: 4100 },
    12: { low: 2200, moderate: 3700, high: 4700 },
    13: { low: 2600, moderate: 4200, high: 5400 },
    14: { low: 2900, moderate: 4900, high: 6200 },
    15: { low: 3300, moderate: 5400, high: 7800 },
    16: { low: 3800, moderate: 6100, high: 9800 },
    17: { low: 4500, moderate: 7200, high: 11700 },
    18: { low: 5000, moderate: 8700, high: 14200 },
    19: { low: 5500, moderate: 10700, high: 17200 },
    20: { low: 6400, moderate: 13200, high: 22000 }
};

// Monster XP by CR
const monsterXP = {
    0: 10, 0.125: 25, 0.25: 50, 0.5: 100,
    1: 200, 2: 450, 3: 700, 4: 1100, 5: 1800,
    6: 2300, 7: 2900, 8: 3900, 9: 5000, 10: 5900,
    11: 7200, 12: 8400, 13: 10000, 14: 11500, 15: 13000,
    16: 15000, 17: 18000, 18: 20000, 19: 22000, 20: 25000,
    21: 33000, 22: 41000, 23: 50000, 24: 62000, 25: 75000,
    26: 90000, 27: 105000, 28: 120000, 29: 135000, 30: 155000
};

// Encounter multipliers for D&D 2014
const encounterMultipliers2014 = {
    1: 1,
    2: 1.5,
    3: 2, 4: 2, 5: 2, 6: 2,
    7: 2.5, 8: 2.5, 9: 2.5, 10: 2.5,
    11: 3, 12: 3, 13: 3, 14: 3
};

function getEncounterMultiplier2014(numMonsters) {
    if (numMonsters >= 15) return 4;
    return encounterMultipliers2014[numMonsters] || 4;
}

function addCharacterGroup() {
    const container = document.getElementById('characterGroups');
    const newGroup = document.createElement('div');
    newGroup.className = 'character-group';
    newGroup.innerHTML = `
        <div class="input-row">
            <div class="input-group">
                <label>Number of Characters</label>
                <select class="char-count" onchange="calculateEncounter()">
                    <option value="1" selected>1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                </select>
            </div>
            <div class="input-group">
                <label>Level</label>
                <select class="char-level" onchange="calculateEncounter()">
                    <option value="1" selected>1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                    <option value="11">11</option>
                    <option value="12">12</option>
                    <option value="13">13</option>
                    <option value="14">14</option>
                    <option value="15">15</option>
                    <option value="16">16</option>
                    <option value="17">17</option>
                    <option value="18">18</option>
                    <option value="19">19</option>
                    <option value="20">20</option>
                </select>
            </div>
            <button type="button" class="remove-button" onclick="removeCharacterGroup(this)">Remove</button>
        </div>
    `;
    container.appendChild(newGroup);
    updateRemoveButtons();
    calculateEncounter();
}

function removeCharacterGroup(button) {
    button.parentElement.parentElement.remove();
    updateRemoveButtons();
    calculateEncounter();
}

function addMonsterGroup() {
    const container = document.getElementById('monsterGroups');
    const newGroup = document.createElement('div');
    newGroup.className = 'monster-group';
    newGroup.innerHTML = `
        <div class="input-row">
            <div class="input-group">
                <label>Number of Monsters</label>
                <select class="monster-count" onchange="calculateEncounter()">
                    <option value="1" selected>1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                    <option value="11">11</option>
                    <option value="12">12</option>
                    <option value="13">13</option>
                    <option value="14">14</option>
                    <option value="15">15</option>
                    <option value="16">16</option>
                    <option value="17">17</option>
                    <option value="18">18</option>
                    <option value="19">19</option>
                    <option value="20">20</option>
                </select>
            </div>
            <div class="input-group">
                <label>Challenge Rating</label>
                <select class="monster-cr" onchange="calculateEncounter()">
                    <option value="0">0</option>
                    <option value="0.125">1/8</option>
                    <option value="0.25">1/4</option>
                    <option value="0.5">1/2</option>
                    <option value="1" selected>1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                    <option value="11">11</option>
                    <option value="12">12</option>
                    <option value="13">13</option>
                    <option value="14">14</option>
                    <option value="15">15</option>
                    <option value="16">16</option>
                    <option value="17">17</option>
                    <option value="18">18</option>
                    <option value="19">19</option>
                    <option value="20">20</option>
                    <option value="21">21</option>
                    <option value="22">22</option>
                    <option value="23">23</option>
                    <option value="24">24</option>
                    <option value="25">25</option>
                    <option value="26">26</option>
                    <option value="27">27</option>
                    <option value="28">28</option>
                    <option value="29">29</option>
                    <option value="30">30</option>
                </select>
            </div>
            <button type="button" class="remove-button" onclick="removeMonsterGroup(this)">Remove</button>
        </div>
    `;
    container.appendChild(newGroup);
    updateRemoveButtons();
    calculateEncounter();
}

function removeMonsterGroup(button) {
    button.parentElement.parentElement.remove();
    updateRemoveButtons();
    calculateEncounter();
}

function updateRemoveButtons() {
    const charGroups = document.querySelectorAll('.character-group');
    const monsterGroups = document.querySelectorAll('.monster-group');
    
    charGroups.forEach((group, index) => {
        const removeBtn = group.querySelector('.remove-button');
        removeBtn.style.display = index > 0 ? 'inline-block' : 'none';
    });
    
    monsterGroups.forEach((group, index) => {
        const removeBtn = group.querySelector('.remove-button');
        removeBtn.style.display = index > 0 ? 'inline-block' : 'none';
    });
}

function calculateEncounter() {
    const charGroups = document.querySelectorAll('.character-group');
    let totalChars = 0;
    let total2014Easy = 0, total2014Medium = 0, total2014Hard = 0, total2014Deadly = 0;
    let totalLevels = 0;
    
    charGroups.forEach(group => {
        const count = parseInt(group.querySelector('.char-count').value) || 0;
        const level = parseInt(group.querySelector('.char-level').value) || 1;
        const thresholds2014 = xpThresholds2014[level];
        
        totalChars += count;
        totalLevels += level * count;
        total2014Easy += thresholds2014.easy * count;
        total2014Medium += thresholds2014.medium * count;
        total2014Hard += thresholds2014.hard * count;
        total2014Deadly += thresholds2014.deadly * count;
    });
    
    const avgLevel = Math.round(totalLevels / totalChars);
    
    const monsterGroups = document.querySelectorAll('.monster-group');
    let totalMonsters = 0;
    let baseMonsterXP = 0;
    let totalMonsterCR = 0;
    
    monsterGroups.forEach(group => {
        const count = parseInt(group.querySelector('.monster-count').value) || 0;
        const cr = parseFloat(group.querySelector('.monster-cr').value) || 0;
        
        totalMonsters += count;
        baseMonsterXP += monsterXP[cr] * count;
        totalMonsterCR += cr * count;
    });
    
    let resultText = `<strong>Base Monster XP:</strong> ${baseMonsterXP}<br>`;
    resultText += `<strong>Party:</strong> ${totalChars} characters, average level ${avgLevel}<br><br>`;
    
    // D&D 2014 Method
    const multiplier2014 = getEncounterMultiplier2014(totalMonsters);
    const adjusted2014XP = Math.round(baseMonsterXP * multiplier2014);
    let difficulty2014 = '';
    
    if (adjusted2014XP < total2014Easy) {
        difficulty2014 = '<span class="difficulty-easy">EASY</span>';
    } else if (adjusted2014XP < total2014Medium) {
        difficulty2014 = '<span class="difficulty-easy">EASY</span>';
    } else if (adjusted2014XP < total2014Hard) {
        difficulty2014 = '<span class="difficulty-medium">MEDIUM</span>';
    } else if (adjusted2014XP < total2014Deadly) {
        difficulty2014 = '<span class="difficulty-hard">HARD</span>';
    } else {
        difficulty2014 = '<span class="difficulty-deadly">DEADLY</span>';
    }
    
    resultText += `<strong>D&D 2014 Method</strong><br>`;
    resultText += `Thresholds: Easy ${total2014Easy} | Medium ${total2014Medium} | Hard ${total2014Hard} | Deadly ${total2014Deadly}<br>`;
    resultText += `Multiplier (${totalMonsters} monsters): ×${multiplier2014} | Adjusted XP: ${adjusted2014XP} | ${difficulty2014}<br><br>`;
    
    // D&D 2024 Method
    const thresholds2024Base = encounterThresholds2024[avgLevel] || encounterThresholds2024[20];
    const thresholds2024 = {
        low: thresholds2024Base.low * totalChars,
        moderate: thresholds2024Base.moderate * totalChars,
        high: thresholds2024Base.high * totalChars
    };
    let difficulty2024 = '';
    
    if (baseMonsterXP < thresholds2024.low) {
        difficulty2024 = '<span class="difficulty-easy">LOW</span>';
    } else if (baseMonsterXP < thresholds2024.moderate) {
        difficulty2024 = '<span class="difficulty-medium">MODERATE</span>';
    } else if (baseMonsterXP < thresholds2024.high) {
        difficulty2024 = '<span class="difficulty-hard">HIGH</span>';
    } else {
        difficulty2024 = '<span class="difficulty-deadly">Above HIGH</span>';
    }
    
    resultText += `<strong>D&D 2024 Method</strong><br>`;
    resultText += `Base Thresholds (level ${avgLevel}): Low ${thresholds2024Base.low} | Moderate ${thresholds2024Base.moderate} | High ${thresholds2024Base.high}<br>`;
    resultText += `Party Thresholds (×${totalChars} characters): Low ${thresholds2024.low} | Moderate ${thresholds2024.moderate} | High ${thresholds2024.high}<br>`;
    resultText += `Base Monster XP: ${baseMonsterXP} | ${difficulty2024}<br><br>`;
    
    // Lazy Encounter Benchmark
    const totalCharacterLevels = totalLevels;
    let lazyBenchmarkText = '';
    let deadlyThreshold = 0;
    let singleMonsterDeadly = 0;
    
    if (avgLevel >= 17) {
        const lowerThreshold = totalCharacterLevels * 0.5;
        const upperThreshold = totalCharacterLevels;
        deadlyThreshold = lowerThreshold;
        lazyBenchmarkText = `Potentially deadly if total monster CR ≥ ${lowerThreshold} to ${upperThreshold}`;
    } else if (avgLevel >= 11) {
        const lowerThreshold = totalCharacterLevels * 0.5;
        const upperThreshold = totalCharacterLevels * 0.75;
        deadlyThreshold = lowerThreshold;
        lazyBenchmarkText = `Potentially deadly if total monster CR ≥ ${lowerThreshold} to ${upperThreshold}`;
    } else if (avgLevel >= 5) {
        deadlyThreshold = totalCharacterLevels * 0.5;
        lazyBenchmarkText = `Potentially deadly if total monster CR ≥ ${deadlyThreshold}`;
    } else {
        deadlyThreshold = totalCharacterLevels * 0.25;
        lazyBenchmarkText = `Potentially deadly if total monster CR ≥ ${deadlyThreshold}`;
    }
    
    if (avgLevel >= 5) {
        singleMonsterDeadly = avgLevel * 1.5;
    } else {
        singleMonsterDeadly = avgLevel;
    }
    
    let difficultyLazy = '';
    
    // Always check for single monster deadly threshold regardless of total number of monsters
    const highestCR = Math.max(...Array.from(monsterGroups).map(group => 
        parseFloat(group.querySelector('.monster-cr').value) || 0
    ));
    
    // For levels 11+, we have three thresholds to check
    if (avgLevel >= 11) {
        const lowerThreshold = totalCharacterLevels * 0.5;
        const upperThreshold = totalCharacterLevels * (avgLevel >= 17 ? 1 : 0.75);
        
        if (highestCR >= singleMonsterDeadly || totalMonsterCR >= upperThreshold) {
            difficultyLazy = '<span class="difficulty-deadly">POTENTIALLY DEADLY (High Threshold)</span>';
        } else if (totalMonsterCR >= lowerThreshold) {
            difficultyLazy = '<span class="difficulty-warning">POTENTIALLY DEADLY (Low Threshold)</span>';
        } else {
            difficultyLazy = '<span class="difficulty-easy">NOT POTENTIALLY DEADLY</span>';
        }
    } else {
        // For levels 1-10, simple two-tier system
        if (highestCR >= singleMonsterDeadly || totalMonsterCR >= deadlyThreshold) {
            difficultyLazy = '<span class="difficulty-deadly">POTENTIALLY DEADLY</span>';
        } else {
            difficultyLazy = '<span class="difficulty-easy">NOT POTENTIALLY DEADLY</span>';
        }
    }
    
    resultText += `<strong>Lazy Encounter Benchmark</strong><br>`;
    resultText += `Total Character Levels: ${totalCharacterLevels} | Total Monster CR: ${totalMonsterCR}<br>`;
    resultText += `${lazyBenchmarkText}<br>`;
    resultText += `Potentially deadly single monster if CR ≥ ${singleMonsterDeadly}<br>`;
    resultText += `Assessment: ${difficultyLazy}`;
    
    document.getElementById('encounterResult').innerHTML = resultText;
}

// Initialize the calculator
calculateEncounter();
updateRemoveButtons();
</script>

</body>
</html>